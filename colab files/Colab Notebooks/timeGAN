{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"timeGAN","provenance":[],"collapsed_sections":[],"mount_file_id":"1DphVdonzMtSk95ejSdiLNAYrpu8nYBTE","authorship_tag":"ABX9TyPKeChGmokhoc3jlIR1GW6N"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wO3VjJ4SaGHN","executionInfo":{"status":"ok","timestamp":1660394289931,"user_tz":-120,"elapsed":433,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}},"outputId":"1d79d551-7ead-4420-bf1b-6d1950b7089f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Sat Aug 13 12:38:08 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   37C    P0    25W / 250W |      0MiB / 16280MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}],"source":["!nvidia-smi"]},{"cell_type":"code","source":["import torch\n","import os\n","import copy\n","import random\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","from pylab import rcParams\n","import matplotlib.pyplot as plt\n","from matplotlib import rc\n","from sklearn import preprocessing\n","from sklearn.model_selection import train_test_split, KFold\n","from sklearn.metrics import accuracy_score, auc, f1_score, precision_score, recall_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.datasets import make_classification\n","from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.utils.fixes import linspace\n","\n","from torch.nn.utils import weight_norm\n","from torch import nn, optim\n","from torchsummary import summary\n","from torchvision import transforms\n","from torch.utils.data import TensorDataset, DataLoader, ConcatDataset\n","\n","import torch.nn.functional as F\n","\n","\n","from sklearn.preprocessing import MinMaxScaler\n","\n","from tensorflow import function, GradientTape, sqrt, abs, reduce_mean, ones_like, zeros_like, convert_to_tensor,float32\n","from tensorflow import data as tfdata\n","from tensorflow import config as tfconfig\n","from tensorflow import nn\n","from tensorflow.keras import Model, Sequential, Input\n","from tensorflow.keras.layers import GRU, LSTM, Dense\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.losses import BinaryCrossentropy, MeanSquaredError\n","\n","\n","from tqdm import tqdm, trange\n","import matplotlib.gridspec as gridspec\n","\n","from sklearn.decomposition import PCA\n","from sklearn.manifold import TSNE\n","\n","CLASS_NORMAL = 1\n","CLASS_LEFT = 0\n","\n","RANDOM_SEED = 2022\n","def seed_everything(seed: int):\n","  random.seed(seed)\n","  np.random.seed(seed)\n","  torch.manual_seed(seed)\n","  if torch.cuda.is_available():\n","      torch.cuda.manual_seed(seed)\n","\n","seed_everything(RANDOM_SEED)"],"metadata":{"id":"VWIatyRG68Ae","executionInfo":{"status":"ok","timestamp":1660394295936,"user_tz":-120,"elapsed":6008,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["real_005_path = 'drive/MyDrive/dataset/MA_1D_CYCLE/dataset_real_005.csv'\n","real_010_path = 'drive/MyDrive/dataset/MA_1D_CYCLE/dataset_real_010.csv'\n","real_015_path = 'drive/MyDrive/dataset/MA_1D_CYCLE/dataset_real_015.csv'\n","real_020_path = 'drive/MyDrive/dataset/MA_1D_CYCLE/dataset_real_020.csv'\n","real_025_path = 'drive/MyDrive/dataset/MA_1D_CYCLE/dataset_real_025.csv'\n","real_N_path = 'drive/MyDrive/dataset/MA_1D_CYCLE/dataset_real_N.csv'\n","\n","\n","fake_005_path = 'drive/MyDrive/dataset/MA_1D_CYCLE/dataset_fake_005.csv'\n","fake_010_path = 'drive/MyDrive/dataset/MA_1D_CYCLE/dataset_fake_010.csv'\n","fake_015_path = 'drive/MyDrive/dataset/MA_1D_CYCLE/dataset_fake_015.csv'\n","fake_020_path = 'drive/MyDrive/dataset/MA_1D_CYCLE/dataset_fake_020.csv'\n","fake_025_path = 'drive/MyDrive/dataset/MA_1D_CYCLE/dataset_fake_025.csv'\n","fake_N_path = 'drive/MyDrive/dataset/MA_1D_CYCLE/dataset_fake_N.csv'"],"metadata":{"id":"T-Cr9EtjQ2lR","executionInfo":{"status":"ok","timestamp":1660394295936,"user_tz":-120,"elapsed":5,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["real_005_df = pd.read_csv(real_005_path, header=None)\n","real_010_df = pd.read_csv(real_010_path, header=None)\n","real_015_df = pd.read_csv(real_015_path, header=None)\n","real_020_df = pd.read_csv(real_020_path, header=None)\n","real_025_df = pd.read_csv(real_025_path, header=None)\n","real_N_df = pd.read_csv(real_N_path, header=None)"],"metadata":{"id":"b3EaHvEMQ54X","executionInfo":{"status":"ok","timestamp":1660394298745,"user_tz":-120,"elapsed":2813,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["real_df = pd.concat([real_005_df, real_010_df, real_015_df, real_020_df, real_025_df, real_N_df],axis = 0, ignore_index= True)\n","# real_df = pd.concat([real_010_df, real_015_df, real_020_df, real_025_df, real_N_df],axis = 0, ignore_index= True)\n","# real_df = pd.concat([real_015_df, real_020_df, real_025_df, real_N_df],axis = 0, ignore_index= True)\n","# real_df = pd.concat([real_020_df, real_025_df, real_N_df],axis = 0, ignore_index= True)\n","real_df.rename(columns={350: 'target'}, inplace=True)\n","\n","scaler_real = preprocessing.MinMaxScaler()\n","scaler_real.fit(real_df.iloc[:,:-1].T)\n","real_df.iloc[:,:-1] = scaler_real.transform(real_df.iloc[:,:-1].T).T\n","\n","real_df.reset_index(drop=True)\n","# plt.plot(real_df.iloc[0,:-1])\n","real_df = real_df.sample(frac=1.0)"],"metadata":{"id":"dBTgFr1EQ8P6","executionInfo":{"status":"ok","timestamp":1660394298746,"user_tz":-120,"elapsed":8,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["fake_005_df = pd.read_csv(fake_005_path, header=None)\n","fake_010_df = pd.read_csv(fake_010_path, header=None)\n","fake_015_df = pd.read_csv(fake_015_path, header=None)\n","fake_020_df = pd.read_csv(fake_020_path, header=None)\n","fake_025_df = pd.read_csv(fake_025_path, header=None)\n","fake_N_df = pd.read_csv(fake_N_path, header=None)"],"metadata":{"id":"PSp2odKKQ89y","executionInfo":{"status":"ok","timestamp":1660394301568,"user_tz":-120,"elapsed":2828,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["fake_df = pd.concat([fake_005_df, fake_010_df, fake_015_df, fake_020_df, fake_025_df, fake_N_df],axis = 0, ignore_index= True)\n","# fake_df = pd.concat([fake_010_df, fake_015_df, fake_020_df, fake_025_df, fake_N_df],axis = 0, ignore_index= True)\n","# fake_df = pd.concat([fake_015_df, fake_020_df, fake_025_df, fake_N_df],axis = 0, ignore_index= True)\n","# fake_df = pd.concat([fake_020_df, fake_025_df, fake_N_df],axis = 0, ignore_index= True)\n","fake_df.rename(columns={350: 'target'}, inplace=True)\n","\n","scaler_fake = preprocessing.MinMaxScaler()\n","scaler_fake.fit(fake_df.iloc[:,:-1].T)\n","fake_df.iloc[:,:-1] = scaler_fake.transform(fake_df.iloc[:,:-1].T).T\n","\n","fake_df.reset_index(drop=True)\n","# plt.plot(test_df.iloc[0,:-1])\n","fake_df = fake_df.sample(frac=1.0)"],"metadata":{"id":"z7gJZz_-Q_98","executionInfo":{"status":"ok","timestamp":1660394301568,"user_tz":-120,"elapsed":8,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["all_df = pd.concat([real_df, fake_df],axis = 0, ignore_index= True)\n","\n","df = real_df"],"metadata":{"id":"cAo77AfjRB37","executionInfo":{"status":"ok","timestamp":1660394393145,"user_tz":-120,"elapsed":243,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["left_df = df[df.target == CLASS_LEFT]\n","normal_df = df[df.target == CLASS_NORMAL]\n","\n","train_df, val_df = train_test_split(\n","  normal_df,\n","  test_size=0.15,\n","  random_state=RANDOM_SEED\n",")\n","\n","_, test_df = train_test_split(\n","  val_df,\n","  test_size=0.33,\n","  random_state=RANDOM_SEED\n",")"],"metadata":{"id":"XwIyTYmmRiI2","executionInfo":{"status":"ok","timestamp":1660394394738,"user_tz":-120,"elapsed":237,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["normal_df = normal_df.drop(['target'], axis=1)"],"metadata":{"id":"w9jMJAdado5M","executionInfo":{"status":"ok","timestamp":1660394395811,"user_tz":-120,"elapsed":5,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# seq_len = 24\n","# n_seq = 6\n","# hidden_dim = 24\n","# noise_dim = 32\n","\n","seq_len = 350\n","n_seq = 1\n","hidden_dim = 350\n","noise_dim = 100\n","\n","# seq_len = 35\n","# n_seq = 1\n","# hidden_dim = 35\n","# noise_dim = 100\n","\n","gamma = 1\n","\n","\n","dim = 128\n","batch_size = 128\n","\n","log_step = 100\n","learning_rate = 5e-4\n","train_steps = 5000\n","\n","# gan_args = batch_size, learning_rate, noise_dim, 24, 2, (0, 1), dim\n","# self.batch_size, self.lr, self.beta_1, self.beta_2, self.noise_dim, self.data_dim, self.layers_dim = model_parameters\n","gan_args = batch_size, learning_rate,  24, 2, noise_dim, (0, 1), dim"],"metadata":{"id":"0eLmgQVk7ITA","executionInfo":{"status":"ok","timestamp":1660398898385,"user_tz":-120,"elapsed":242,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["def preprocess(data, seq_len):\n","    ori_data = data[::-1]\n","    # scaler = MinMaxScaler().fit(ori_data)\n","    # ori_data = scaler.transform(ori_data)\n","    \n","    temp_data = []\n","    for i in range(len(ori_data)):\n","      \n","      cur = ori_data[i:i+1]\n","      for j in range(0, cur.shape[1] - seq_len):\n","        _x = cur[0,j:j + seq_len]\n","        temp_data.append(_x)\n","        \n","    return temp_data"],"metadata":{"id":"1ZPOmtac7Jpg","executionInfo":{"status":"ok","timestamp":1660398901039,"user_tz":-120,"elapsed":245,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":62,"outputs":[]},{"cell_type":"code","source":["normal_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":519},"id":"RudrLHh3XHus","executionInfo":{"status":"ok","timestamp":1660398949263,"user_tz":-120,"elapsed":4,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}},"outputId":"911f4126-03a1-4994-bb42-68e92d2a6a98"},"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         0         1         2         3         4         5         6    \\\n","68  0.873239  0.788732  0.816901  0.816901  0.788732  0.816901  0.830986   \n","62  0.888889  0.861111  0.791667  0.805556  0.805556  0.777778  0.805556   \n","67  0.847222  0.902778  0.916667  0.861111  0.805556  0.805556  0.805556   \n","65  0.902778  0.875000  0.791667  0.819444  0.819444  0.777778  0.805556   \n","71  0.845070  0.760563  0.802817  0.802817  0.760563  0.802817  0.845070   \n","70  0.888889  1.000000  0.930556  0.861111  0.791667  0.791667  0.791667   \n","69  0.916667  0.875000  0.819444  0.805556  0.819444  0.791667  0.819444   \n","64  0.887324  0.788732  0.816901  0.830986  0.788732  0.830986  0.830986   \n","63  0.828571  0.900000  0.914286  0.885714  0.771429  0.800000  0.814286   \n","66  0.902778  0.833333  0.777778  0.791667  0.763889  0.791667  0.805556   \n","60  0.873239  0.774648  0.788732  0.816901  0.774648  0.830986  0.830986   \n","61  0.845070  0.901408  0.887324  0.859155  0.774648  0.802817  0.816901   \n","\n","         7         8         9    ...       340       341       342       343  \\\n","68  0.901408  0.873239  0.887324  ...  0.197183  0.183099  0.169014  0.169014   \n","62  0.833333  0.875000  0.861111  ...  0.194444  0.194444  0.194444  0.180556   \n","67  0.791667  0.833333  0.861111  ...  0.222222  0.222222  0.208333  0.208333   \n","65  0.833333  0.888889  0.875000  ...  0.194444  0.194444  0.180556  0.180556   \n","71  0.859155  0.859155  0.859155  ...  0.183099  0.154930  0.169014  0.154930   \n","70  0.763889  0.791667  0.833333  ...  0.208333  0.194444  0.194444  0.180556   \n","69  0.833333  0.888889  0.875000  ...  0.208333  0.208333  0.180556  0.194444   \n","64  0.873239  0.873239  0.887324  ...  0.183099  0.183099  0.169014  0.169014   \n","63  0.785714  0.828571  0.828571  ...  0.185714  0.185714  0.185714  0.171429   \n","66  0.847222  0.875000  0.888889  ...  0.194444  0.180556  0.166667  0.180556   \n","60  0.887324  0.873239  0.887324  ...  0.169014  0.183099  0.183099  0.169014   \n","61  0.774648  0.802817  0.830986  ...  0.211268  0.197183  0.197183  0.197183   \n","\n","         344       345       346       347       348       349  \n","68  0.169014  0.169014  0.169014  0.154930  0.154930  0.154930  \n","62  0.180556  0.166667  0.166667  0.166667  0.166667  0.166667  \n","67  0.194444  0.180556  0.180556  0.208333  0.180556  0.180556  \n","65  0.180556  0.180556  0.180556  0.166667  0.166667  0.166667  \n","71  0.154930  0.154930  0.154930  0.140845  0.140845  0.140845  \n","70  0.194444  0.180556  0.180556  0.166667  0.166667  0.166667  \n","69  0.180556  0.180556  0.180556  0.180556  0.166667  0.166667  \n","64  0.169014  0.154930  0.154930  0.154930  0.154930  0.140845  \n","63  0.157143  0.157143  0.157143  0.142857  0.142857  0.142857  \n","66  0.180556  0.166667  0.166667  0.152778  0.152778  0.152778  \n","60  0.154930  0.154930  0.154930  0.140845  0.154930  0.140845  \n","61  0.169014  0.183099  0.169014  0.169014  0.169014  0.169014  \n","\n","[12 rows x 350 columns]"],"text/html":["\n","  <div id=\"df-a2358177-c5c1-4a2c-bc97-c5de57ca2a64\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>...</th>\n","      <th>340</th>\n","      <th>341</th>\n","      <th>342</th>\n","      <th>343</th>\n","      <th>344</th>\n","      <th>345</th>\n","      <th>346</th>\n","      <th>347</th>\n","      <th>348</th>\n","      <th>349</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>68</th>\n","      <td>0.873239</td>\n","      <td>0.788732</td>\n","      <td>0.816901</td>\n","      <td>0.816901</td>\n","      <td>0.788732</td>\n","      <td>0.816901</td>\n","      <td>0.830986</td>\n","      <td>0.901408</td>\n","      <td>0.873239</td>\n","      <td>0.887324</td>\n","      <td>...</td>\n","      <td>0.197183</td>\n","      <td>0.183099</td>\n","      <td>0.169014</td>\n","      <td>0.169014</td>\n","      <td>0.169014</td>\n","      <td>0.169014</td>\n","      <td>0.169014</td>\n","      <td>0.154930</td>\n","      <td>0.154930</td>\n","      <td>0.154930</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>0.888889</td>\n","      <td>0.861111</td>\n","      <td>0.791667</td>\n","      <td>0.805556</td>\n","      <td>0.805556</td>\n","      <td>0.777778</td>\n","      <td>0.805556</td>\n","      <td>0.833333</td>\n","      <td>0.875000</td>\n","      <td>0.861111</td>\n","      <td>...</td>\n","      <td>0.194444</td>\n","      <td>0.194444</td>\n","      <td>0.194444</td>\n","      <td>0.180556</td>\n","      <td>0.180556</td>\n","      <td>0.166667</td>\n","      <td>0.166667</td>\n","      <td>0.166667</td>\n","      <td>0.166667</td>\n","      <td>0.166667</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>0.847222</td>\n","      <td>0.902778</td>\n","      <td>0.916667</td>\n","      <td>0.861111</td>\n","      <td>0.805556</td>\n","      <td>0.805556</td>\n","      <td>0.805556</td>\n","      <td>0.791667</td>\n","      <td>0.833333</td>\n","      <td>0.861111</td>\n","      <td>...</td>\n","      <td>0.222222</td>\n","      <td>0.222222</td>\n","      <td>0.208333</td>\n","      <td>0.208333</td>\n","      <td>0.194444</td>\n","      <td>0.180556</td>\n","      <td>0.180556</td>\n","      <td>0.208333</td>\n","      <td>0.180556</td>\n","      <td>0.180556</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>0.902778</td>\n","      <td>0.875000</td>\n","      <td>0.791667</td>\n","      <td>0.819444</td>\n","      <td>0.819444</td>\n","      <td>0.777778</td>\n","      <td>0.805556</td>\n","      <td>0.833333</td>\n","      <td>0.888889</td>\n","      <td>0.875000</td>\n","      <td>...</td>\n","      <td>0.194444</td>\n","      <td>0.194444</td>\n","      <td>0.180556</td>\n","      <td>0.180556</td>\n","      <td>0.180556</td>\n","      <td>0.180556</td>\n","      <td>0.180556</td>\n","      <td>0.166667</td>\n","      <td>0.166667</td>\n","      <td>0.166667</td>\n","    </tr>\n","    <tr>\n","      <th>71</th>\n","      <td>0.845070</td>\n","      <td>0.760563</td>\n","      <td>0.802817</td>\n","      <td>0.802817</td>\n","      <td>0.760563</td>\n","      <td>0.802817</td>\n","      <td>0.845070</td>\n","      <td>0.859155</td>\n","      <td>0.859155</td>\n","      <td>0.859155</td>\n","      <td>...</td>\n","      <td>0.183099</td>\n","      <td>0.154930</td>\n","      <td>0.169014</td>\n","      <td>0.154930</td>\n","      <td>0.154930</td>\n","      <td>0.154930</td>\n","      <td>0.154930</td>\n","      <td>0.140845</td>\n","      <td>0.140845</td>\n","      <td>0.140845</td>\n","    </tr>\n","    <tr>\n","      <th>70</th>\n","      <td>0.888889</td>\n","      <td>1.000000</td>\n","      <td>0.930556</td>\n","      <td>0.861111</td>\n","      <td>0.791667</td>\n","      <td>0.791667</td>\n","      <td>0.791667</td>\n","      <td>0.763889</td>\n","      <td>0.791667</td>\n","      <td>0.833333</td>\n","      <td>...</td>\n","      <td>0.208333</td>\n","      <td>0.194444</td>\n","      <td>0.194444</td>\n","      <td>0.180556</td>\n","      <td>0.194444</td>\n","      <td>0.180556</td>\n","      <td>0.180556</td>\n","      <td>0.166667</td>\n","      <td>0.166667</td>\n","      <td>0.166667</td>\n","    </tr>\n","    <tr>\n","      <th>69</th>\n","      <td>0.916667</td>\n","      <td>0.875000</td>\n","      <td>0.819444</td>\n","      <td>0.805556</td>\n","      <td>0.819444</td>\n","      <td>0.791667</td>\n","      <td>0.819444</td>\n","      <td>0.833333</td>\n","      <td>0.888889</td>\n","      <td>0.875000</td>\n","      <td>...</td>\n","      <td>0.208333</td>\n","      <td>0.208333</td>\n","      <td>0.180556</td>\n","      <td>0.194444</td>\n","      <td>0.180556</td>\n","      <td>0.180556</td>\n","      <td>0.180556</td>\n","      <td>0.180556</td>\n","      <td>0.166667</td>\n","      <td>0.166667</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>0.887324</td>\n","      <td>0.788732</td>\n","      <td>0.816901</td>\n","      <td>0.830986</td>\n","      <td>0.788732</td>\n","      <td>0.830986</td>\n","      <td>0.830986</td>\n","      <td>0.873239</td>\n","      <td>0.873239</td>\n","      <td>0.887324</td>\n","      <td>...</td>\n","      <td>0.183099</td>\n","      <td>0.183099</td>\n","      <td>0.169014</td>\n","      <td>0.169014</td>\n","      <td>0.169014</td>\n","      <td>0.154930</td>\n","      <td>0.154930</td>\n","      <td>0.154930</td>\n","      <td>0.154930</td>\n","      <td>0.140845</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>0.828571</td>\n","      <td>0.900000</td>\n","      <td>0.914286</td>\n","      <td>0.885714</td>\n","      <td>0.771429</td>\n","      <td>0.800000</td>\n","      <td>0.814286</td>\n","      <td>0.785714</td>\n","      <td>0.828571</td>\n","      <td>0.828571</td>\n","      <td>...</td>\n","      <td>0.185714</td>\n","      <td>0.185714</td>\n","      <td>0.185714</td>\n","      <td>0.171429</td>\n","      <td>0.157143</td>\n","      <td>0.157143</td>\n","      <td>0.157143</td>\n","      <td>0.142857</td>\n","      <td>0.142857</td>\n","      <td>0.142857</td>\n","    </tr>\n","    <tr>\n","      <th>66</th>\n","      <td>0.902778</td>\n","      <td>0.833333</td>\n","      <td>0.777778</td>\n","      <td>0.791667</td>\n","      <td>0.763889</td>\n","      <td>0.791667</td>\n","      <td>0.805556</td>\n","      <td>0.847222</td>\n","      <td>0.875000</td>\n","      <td>0.888889</td>\n","      <td>...</td>\n","      <td>0.194444</td>\n","      <td>0.180556</td>\n","      <td>0.166667</td>\n","      <td>0.180556</td>\n","      <td>0.180556</td>\n","      <td>0.166667</td>\n","      <td>0.166667</td>\n","      <td>0.152778</td>\n","      <td>0.152778</td>\n","      <td>0.152778</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>0.873239</td>\n","      <td>0.774648</td>\n","      <td>0.788732</td>\n","      <td>0.816901</td>\n","      <td>0.774648</td>\n","      <td>0.830986</td>\n","      <td>0.830986</td>\n","      <td>0.887324</td>\n","      <td>0.873239</td>\n","      <td>0.887324</td>\n","      <td>...</td>\n","      <td>0.169014</td>\n","      <td>0.183099</td>\n","      <td>0.183099</td>\n","      <td>0.169014</td>\n","      <td>0.154930</td>\n","      <td>0.154930</td>\n","      <td>0.154930</td>\n","      <td>0.140845</td>\n","      <td>0.154930</td>\n","      <td>0.140845</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>0.845070</td>\n","      <td>0.901408</td>\n","      <td>0.887324</td>\n","      <td>0.859155</td>\n","      <td>0.774648</td>\n","      <td>0.802817</td>\n","      <td>0.816901</td>\n","      <td>0.774648</td>\n","      <td>0.802817</td>\n","      <td>0.830986</td>\n","      <td>...</td>\n","      <td>0.211268</td>\n","      <td>0.197183</td>\n","      <td>0.197183</td>\n","      <td>0.197183</td>\n","      <td>0.169014</td>\n","      <td>0.183099</td>\n","      <td>0.169014</td>\n","      <td>0.169014</td>\n","      <td>0.169014</td>\n","      <td>0.169014</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>12 rows × 350 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2358177-c5c1-4a2c-bc97-c5de57ca2a64')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a2358177-c5c1-4a2c-bc97-c5de57ca2a64 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a2358177-c5c1-4a2c-bc97-c5de57ca2a64');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["# 35长度的训练\n","processed_normal_df = preprocess(normal_df.values, 35)"],"metadata":{"id":"t0MK3GayWddB","executionInfo":{"status":"ok","timestamp":1660398946803,"user_tz":-120,"elapsed":232,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":66,"outputs":[]},{"cell_type":"code","source":["# 350原长度的训练\n","\n","normal_data = []\n","\n","for i in range(len(normal_df)):\n","  x = normal_df.iloc[i,:].values\n","  # y = df.iloc[i,-1]\n","  normal_data.append(x)\n","\n","processed_normal_df = normal_data"],"metadata":{"id":"Z5_47OHBRQCd","executionInfo":{"status":"ok","timestamp":1660398954164,"user_tz":-120,"elapsed":237,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":68,"outputs":[]},{"cell_type":"code","source":["np.shape(processed_normal_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3cKoA8RfoJ21","executionInfo":{"status":"ok","timestamp":1660398956069,"user_tz":-120,"elapsed":265,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}},"outputId":"47af3034-4734-4b41-c133-876149335494"},"execution_count":69,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(12, 350)"]},"metadata":{},"execution_count":69}]},{"cell_type":"code","source":["def net(model, n_layers, hidden_units, output_units, net_type='GRU'):\n","    if net_type=='GRU':\n","        for i in range(n_layers):\n","            model.add(GRU(units=hidden_units,\n","                      return_sequences=True,\n","                      name=f'GRU_{i + 1}'))\n","    else:\n","        for i in range(n_layers):\n","            model.add(LSTM(units=hidden_units,\n","                      return_sequences=True,\n","                      name=f'LSTM_{i + 1}'))\n","\n","    model.add(Dense(units=output_units,\n","                    activation='sigmoid',\n","                    name='OUT'))\n","    return model"],"metadata":{"id":"vrYL1md-7kZU","executionInfo":{"status":"ok","timestamp":1660398960781,"user_tz":-120,"elapsed":293,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":70,"outputs":[]},{"cell_type":"code","source":["class Generator(Model):\n","    def __init__(self, hidden_dim, net_type='GRU'):\n","        self.hidden_dim = hidden_dim\n","        self.net_type = net_type\n","\n","    def build(self, input_shape):\n","        model = Sequential(name='Generator')\n","        model = net(model,\n","                    n_layers=3,\n","                    hidden_units=self.hidden_dim,\n","                    output_units=self.hidden_dim,\n","                    net_type=self.net_type)\n","        return model"],"metadata":{"id":"SCPDOBwh7lKM","executionInfo":{"status":"ok","timestamp":1660398961693,"user_tz":-120,"elapsed":5,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["class Discriminator(Model):\n","    def __init__(self, hidden_dim, net_type='GRU'):\n","        self.hidden_dim = hidden_dim\n","        self.net_type=net_type\n","\n","    def build(self, input_shape):\n","        model = Sequential(name='Discriminator')\n","        model = net(model,\n","                    n_layers=3,\n","                    hidden_units=self.hidden_dim,\n","                    output_units=1,\n","                    net_type=self.net_type)\n","        return model"],"metadata":{"id":"WJFy-4cN7-JJ","executionInfo":{"status":"ok","timestamp":1660398962889,"user_tz":-120,"elapsed":1,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":72,"outputs":[]},{"cell_type":"code","source":["class Recovery(Model):\n","    def __init__(self, hidden_dim, n_seq):\n","        self.hidden_dim=hidden_dim\n","        self.n_seq=n_seq\n","        return\n","\n","    def build(self, input_shape):\n","        recovery = Sequential(name='Recovery')\n","        recovery = net(recovery,\n","                       n_layers=3,\n","                       hidden_units=self.hidden_dim,\n","                       output_units=self.n_seq)\n","        return recovery"],"metadata":{"id":"3VnZ0aOB8AhM","executionInfo":{"status":"ok","timestamp":1660398963862,"user_tz":-120,"elapsed":2,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":73,"outputs":[]},{"cell_type":"code","source":["class Embedder(Model):\n","\n","    def __init__(self, hidden_dim):\n","        self.hidden_dim=hidden_dim\n","        return\n","\n","    def build(self, input_shape):\n","        embedder = Sequential(name='Embedder')\n","        embedder = net(embedder,\n","                       n_layers=3,\n","                       hidden_units=self.hidden_dim,\n","                       output_units=self.hidden_dim)\n","        return embedder"],"metadata":{"id":"bZKWLN-98Ajb","executionInfo":{"status":"ok","timestamp":1660398965019,"user_tz":-120,"elapsed":3,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":74,"outputs":[]},{"cell_type":"code","source":["class Supervisor(Model):\n","    def __init__(self, hidden_dim):\n","        self.hidden_dim=hidden_dim\n","\n","    def build(self, input_shape):\n","        model = Sequential(name='Supervisor')\n","        model = net(model,\n","                    n_layers=2,\n","                    hidden_units=self.hidden_dim,\n","                    output_units=self.hidden_dim)\n","        return model"],"metadata":{"id":"iQW_9Pqa8ENY","executionInfo":{"status":"ok","timestamp":1660398965641,"user_tz":-120,"elapsed":3,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["class TimeGAN():\n","    def __init__(self, model_parameters, hidden_dim, seq_len, n_seq, gamma):\n","        self.seq_len=seq_len\n","        self.batch_size, self.lr, self.beta_1, self.beta_2, self.noise_dim, self.data_dim, self.layers_dim = model_parameters\n","        self.n_seq=n_seq\n","        self.hidden_dim=hidden_dim\n","        self.gamma=gamma\n","        self.define_gan()\n","\n","    def define_gan(self):\n","        self.generator_aux=Generator(self.hidden_dim).build(input_shape=(self.seq_len, self.n_seq))\n","        self.supervisor=Supervisor(self.hidden_dim).build(input_shape=(self.hidden_dim, self.hidden_dim))\n","        self.discriminator=Discriminator(self.hidden_dim).build(input_shape=(self.hidden_dim, self.hidden_dim))\n","        self.recovery = Recovery(self.hidden_dim, self.n_seq).build(input_shape=(self.hidden_dim, self.hidden_dim))\n","        self.embedder = Embedder(self.hidden_dim).build(input_shape=(self.seq_len, self.n_seq))\n","\n","        X = Input(shape=[self.seq_len, self.n_seq], batch_size=self.batch_size, name='RealData')\n","        Z = Input(shape=[self.seq_len, self.n_seq], batch_size=self.batch_size, name='RandomNoise')\n","\n","        # AutoEncoder\n","        H = self.embedder(X)\n","        X_tilde = self.recovery(H)\n","        \n","        self.autoencoder = Model(inputs=X, outputs=X_tilde)\n","\n","        # Adversarial Supervise Architecture\n","        E_Hat = self.generator_aux(Z)\n","        H_hat = self.supervisor(E_Hat)\n","        Y_fake = self.discriminator(H_hat)\n","\n","        self.adversarial_supervised = Model(inputs=Z,\n","                           outputs=Y_fake,\n","                           name='AdversarialSupervised')\n","\n","        \n","        # Adversarial architecture in latent space\n","        Y_fake_e = self.discriminator(E_Hat)\n","\n","        self.adversarial_embedded = Model(inputs=Z,\n","                          outputs=Y_fake_e,\n","                          name='AdversarialEmbedded')\n","        \n","        #Synthetic data generation\n","        X_hat = self.recovery(H_hat)\n","        \n","        self.generator = Model(inputs=Z,\n","                    outputs=X_hat,\n","                    name='FinalGenerator')\n","\n","        \n","        # Final discriminator model\n","        Y_real = self.discriminator(H)\n","        \n","        self.discriminator_model = Model(inputs=X,\n","                         outputs=Y_real,\n","                         name=\"RealDiscriminator\")\n","\n","        # Loss functions\n","        self._mse=MeanSquaredError()\n","        self._bce=BinaryCrossentropy()"],"metadata":{"id":"CieRPq-S8GSJ","executionInfo":{"status":"ok","timestamp":1660398967129,"user_tz":-120,"elapsed":263,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":76,"outputs":[]},{"cell_type":"code","source":["class TimeGAN(TimeGAN):\n","    def __init__(self, model_parameters, hidden_dim, seq_len, n_seq, gamma):\n","        super().__init__(model_parameters, hidden_dim, seq_len, n_seq, gamma)\n","    \n","    @function\n","    def train_autoencoder(self, x, opt):\n","        with GradientTape() as tape:\n","            x_tilde = self.autoencoder(x)\n","            embedding_loss_t0 = self._mse(x, x_tilde)\n","            e_loss_0 = 10 * sqrt(embedding_loss_t0)\n","\n","        var_list = self.embedder.trainable_variables + self.recovery.trainable_variables\n","        gradients = tape.gradient(e_loss_0, var_list)\n","        opt.apply_gradients(zip(gradients, var_list))\n","        return sqrt(embedding_loss_t0)\n","\n","    @function\n","    def train_supervisor(self, x, opt):\n","        with GradientTape() as tape:\n","            h = self.embedder(x)\n","            h_hat_supervised = self.supervisor(h)\n","            g_loss_s = self._mse(h[:, 1:, :], h_hat_supervised[:, 1:, :])\n","\n","        var_list = self.supervisor.trainable_variables + self.generator.trainable_variables\n","        gradients = tape.gradient(g_loss_s, var_list)\n","        apply_grads = [(grad, var) for (grad, var) in zip(gradients, var_list) if grad is not None]\n","        opt.apply_gradients(apply_grads)\n","        return g_loss_s\n","\n","    @function\n","    def train_embedder(self,x, opt):\n","        with GradientTape() as tape:\n","            h = self.embedder(x)\n","            h_hat_supervised = self.supervisor(h)\n","            generator_loss_supervised = self._mse(h[:, 1:, :], h_hat_supervised[:, 1:, :])\n","\n","            x_tilde = self.autoencoder(x)\n","            embedding_loss_t0 = self._mse(x, x_tilde)\n","            e_loss = 10 * sqrt(embedding_loss_t0) + 0.1 * generator_loss_supervised\n","\n","        var_list = self.embedder.trainable_variables + self.recovery.trainable_variables\n","        gradients = tape.gradient(e_loss, var_list)\n","        opt.apply_gradients(zip(gradients, var_list))\n","        return sqrt(embedding_loss_t0)\n","\n","    def discriminator_loss(self, x, z):\n","        y_real = self.discriminator_model(x)\n","        discriminator_loss_real = self._bce(y_true=ones_like(y_real),\n","                                            y_pred=y_real)\n","\n","        y_fake = self.adversarial_supervised(z)\n","        discriminator_loss_fake = self._bce(y_true=zeros_like(y_fake),\n","                                            y_pred=y_fake)\n","\n","        y_fake_e = self.adversarial_embedded(z)\n","        discriminator_loss_fake_e = self._bce(y_true=zeros_like(y_fake_e),\n","                                              y_pred=y_fake_e)\n","        return (discriminator_loss_real +\n","                discriminator_loss_fake +\n","                self.gamma * discriminator_loss_fake_e)\n","\n","    @staticmethod\n","    def calc_generator_moments_loss(y_true, y_pred):\n","        y_true_mean, y_true_var = nn.moments(x=y_true, axes=[0])\n","        y_pred_mean, y_pred_var = nn.moments(x=y_pred, axes=[0])\n","        g_loss_mean = reduce_mean(abs(y_true_mean - y_pred_mean))\n","        g_loss_var = reduce_mean(abs(sqrt(y_true_var + 1e-6) - sqrt(y_pred_var + 1e-6)))\n","        return g_loss_mean + g_loss_var\n","\n","    @function\n","    def train_generator(self, x, z, opt):\n","        with GradientTape() as tape:\n","            y_fake = self.adversarial_supervised(z)\n","            generator_loss_unsupervised = self._bce(y_true=ones_like(y_fake),\n","                                                    y_pred=y_fake)\n","\n","            y_fake_e = self.adversarial_embedded(z)\n","            generator_loss_unsupervised_e = self._bce(y_true=ones_like(y_fake_e),\n","                                                      y_pred=y_fake_e)\n","            h = self.embedder(x)\n","            h_hat_supervised = self.supervisor(h)\n","            generator_loss_supervised = self._mse(h[:, 1:, :], h_hat_supervised[:, 1:, :])\n","\n","            x_hat = self.generator(z)\n","            generator_moment_loss = self.calc_generator_moments_loss(x, x_hat)\n","\n","            generator_loss = (generator_loss_unsupervised +\n","                              generator_loss_unsupervised_e +\n","                              100 * sqrt(generator_loss_supervised) +\n","                              100 * generator_moment_loss)\n","\n","        var_list = self.generator_aux.trainable_variables + self.supervisor.trainable_variables\n","        gradients = tape.gradient(generator_loss, var_list)\n","        opt.apply_gradients(zip(gradients, var_list))\n","        return generator_loss_unsupervised, generator_loss_supervised, generator_moment_loss\n","\n","    @function\n","    def train_discriminator(self, x, z, opt):\n","        with GradientTape() as tape:\n","            discriminator_loss = self.discriminator_loss(x, z)\n","\n","        var_list = self.discriminator.trainable_variables\n","        gradients = tape.gradient(discriminator_loss, var_list)\n","        opt.apply_gradients(zip(gradients, var_list))\n","        return discriminator_loss\n","\n","    def get_batch_data(self, data, n_windows):\n","        data = convert_to_tensor(data, dtype=float32)\n","        return iter(tfdata.Dataset.from_tensor_slices(data)\n","                                .shuffle(buffer_size=n_windows)\n","                                .batch(self.batch_size).repeat())\n","\n","    def _generate_noise(self):\n","        while True:\n","            yield np.random.uniform(low=0, high=1, size=(self.seq_len, self.n_seq))\n","\n","    def get_batch_noise(self):\n","        return iter(tfdata.Dataset.from_generator(self._generate_noise, output_types=float32)\n","                                .batch(self.batch_size)\n","                                .repeat())\n","\n","    def sample(self, n_samples):\n","        steps = n_samples // self.batch_size + 1\n","        data = []\n","        for _ in trange(steps, desc='Synthetic data generation'):\n","            Z_ = next(self.get_batch_noise())\n","            records = self.generator(Z_)\n","            data.append(records)\n","        return np.array(np.vstack(data))"],"metadata":{"id":"vgmrCbd28HCo","executionInfo":{"status":"ok","timestamp":1660398968871,"user_tz":-120,"elapsed":272,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":77,"outputs":[]},{"cell_type":"code","source":["synth = TimeGAN(model_parameters=gan_args, hidden_dim=hidden_dim, seq_len=seq_len, n_seq=n_seq, gamma=1)"],"metadata":{"id":"0oKRer1X8OOc","executionInfo":{"status":"ok","timestamp":1660398979300,"user_tz":-120,"elapsed":7823,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":78,"outputs":[]},{"cell_type":"code","source":["autoencoder_opt = Adam(learning_rate=learning_rate)\n","for _ in tqdm(range(train_steps), desc='Emddeding network training'):\n","    X_ = next(synth.get_batch_data(processed_normal_df, n_windows=len(processed_normal_df)))\n","    step_e_loss_t0 = synth.train_autoencoder(X_, autoencoder_opt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZXZJEhCo8QMk","executionInfo":{"status":"ok","timestamp":1660399589871,"user_tz":-120,"elapsed":610290,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}},"outputId":"7eb4746b-f61b-4de8-bc66-d7085b33900c"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stderr","text":["\rEmddeding network training:   0%|          | 0/5000 [00:00<?, ?it/s]WARNING:tensorflow:Model was constructed with shape (128, 350, 1) for input KerasTensor(type_spec=TensorSpec(shape=(128, 350, 1), dtype=tf.float32, name='RealData'), name='RealData', description=\"created by layer 'RealData'\"), but it was called on an input with incompatible shape (12, 350, 1).\n","WARNING:tensorflow:Model was constructed with shape (128, 350, 1) for input KerasTensor(type_spec=TensorSpec(shape=(128, 350, 1), dtype=tf.float32, name='RealData'), name='RealData', description=\"created by layer 'RealData'\"), but it was called on an input with incompatible shape (12, 350, 1).\n","Emddeding network training: 100%|██████████| 5000/5000 [10:10<00:00,  8.19it/s]\n"]}]},{"cell_type":"code","source":["supervisor_opt = Adam(learning_rate=learning_rate)\n","for _ in tqdm(range(train_steps), desc='Supervised network training'):\n","    X_ = next(synth.get_batch_data(processed_normal_df, n_windows=len(processed_normal_df)))\n","    step_g_loss_s = synth.train_supervisor(X_, supervisor_opt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZiEVy6eM8Rnd","executionInfo":{"status":"ok","timestamp":1660399919216,"user_tz":-120,"elapsed":329372,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}},"outputId":"20617f53-dd37-4b4f-c0b9-c5eb7d27b65d"},"execution_count":80,"outputs":[{"output_type":"stream","name":"stderr","text":["Supervised network training: 100%|██████████| 5000/5000 [05:29<00:00, 15.19it/s]\n"]}]},{"cell_type":"code","source":["generator_opt = Adam(learning_rate=learning_rate)\n","embedder_opt = Adam(learning_rate=learning_rate)\n","discriminator_opt = Adam(learning_rate=learning_rate)"],"metadata":{"id":"iD6Kx66e8Tm0","executionInfo":{"status":"ok","timestamp":1660399919217,"user_tz":-120,"elapsed":23,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":81,"outputs":[]},{"cell_type":"code","source":["step_g_loss_u = step_g_loss_s = step_g_loss_v = step_e_loss_t0 = step_d_loss = 0\n","for _ in tqdm(range(train_steps), desc='Joint networks training'):\n","\n","    #Train the generator (k times as often as the discriminator)\n","    # Here k=2\n","    for _ in range(2):\n","        X_ = next(synth.get_batch_data(processed_normal_df, n_windows=len(processed_normal_df)))\n","        Z_ = next(synth.get_batch_noise())\n","        \n","        # Train the generator\n","        step_g_loss_u, step_g_loss_s, step_g_loss_v = synth.train_generator(X_, Z_, generator_opt)\n","\n","        # Train the embedder\n","        step_e_loss_t0 = synth.train_embedder(X_, embedder_opt)\n","\n","    X_ = next(synth.get_batch_data(processed_normal_df, n_windows=len(processed_normal_df)))\n","    Z_ = next(synth.get_batch_noise())\n","    step_d_loss = synth.discriminator_loss(X_, Z_)\n","    \n","    if step_d_loss > 0.15:\n","        step_d_loss = synth.train_discriminator(X_, Z_, discriminator_opt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nqATASeu8VAz","outputId":"c9c387bb-4f14-42a8-d993-469cd084df07","executionInfo":{"status":"ok","timestamp":1660421473482,"user_tz":-120,"elapsed":21554270,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}}},"execution_count":82,"outputs":[{"output_type":"stream","name":"stderr","text":["\rJoint networks training:   0%|          | 0/5000 [00:00<?, ?it/s]WARNING:tensorflow:Model was constructed with shape (128, 350, 1) for input KerasTensor(type_spec=TensorSpec(shape=(128, 350, 1), dtype=tf.float32, name='RealData'), name='RealData', description=\"created by layer 'RealData'\"), but it was called on an input with incompatible shape (12, 350, 1).\n","WARNING:tensorflow:Model was constructed with shape (128, 350, 1) for input KerasTensor(type_spec=TensorSpec(shape=(128, 350, 1), dtype=tf.float32, name='RealData'), name='RealData', description=\"created by layer 'RealData'\"), but it was called on an input with incompatible shape (12, 350, 1).\n","WARNING:tensorflow:Model was constructed with shape (128, 350, 1) for input KerasTensor(type_spec=TensorSpec(shape=(128, 350, 1), dtype=tf.float32, name='RealData'), name='RealData', description=\"created by layer 'RealData'\"), but it was called on an input with incompatible shape (12, 350, 1).\n","WARNING:tensorflow:Model was constructed with shape (128, 350, 1) for input KerasTensor(type_spec=TensorSpec(shape=(128, 350, 1), dtype=tf.float32, name='RealData'), name='RealData', description=\"created by layer 'RealData'\"), but it was called on an input with incompatible shape (12, 350, 1).\n","Joint networks training: 100%|██████████| 5000/5000 [5:59:14<00:00,  4.31s/it]\n"]}]},{"cell_type":"code","source":["sample_size = 50\n","idx = np.random.permutation(len(processed_normal_df))[:sample_size]\n","\n","real_sample = np.asarray(processed_normal_df)[idx]\n","synth_data = synth.sample(len(processed_normal_df))\n","synthetic_sample = np.asarray(synth_data)[idx]\n","\n","#for the purpose of comparision we need the data to be 2-Dimensional. For that reason we are going to use only two componentes for both the PCA and TSNE.\n","synth_data_reduced = real_sample.reshape(-1, seq_len)\n","stock_data_reduced = np.asarray(synthetic_sample).reshape(-1,seq_len)\n","\n","n_components = 2\n","pca = PCA(n_components=n_components)\n","tsne = TSNE(n_components=n_components, n_iter=300)\n","\n","#The fit of the methods must be done only using the real sequential data\n","pca.fit(stock_data_reduced)\n","\n","pca_real = pd.DataFrame(pca.transform(stock_data_reduced))\n","pca_synth = pd.DataFrame(pca.transform(synth_data_reduced))\n","\n","data_reduced = np.concatenate((stock_data_reduced, synth_data_reduced), axis=0)\n","tsne_results = pd.DataFrame(tsne.fit_transform(data_reduced))"],"metadata":{"id":"VeFUBozp8WwD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660421473836,"user_tz":-120,"elapsed":374,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}},"outputId":"6f0541c5-922b-4410-9c90-c380d91a1d16"},"execution_count":83,"outputs":[{"output_type":"stream","name":"stderr","text":["Synthetic data generation: 100%|██████████| 1/1 [00:00<00:00,  2.88it/s]\n","/usr/local/lib/python3.7/dist-packages/sklearn/manifold/_t_sne.py:783: FutureWarning: The default initialization in TSNE will change from 'random' to 'pca' in 1.2.\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/manifold/_t_sne.py:793: FutureWarning: The default learning rate in TSNE will change from 200.0 to 'auto' in 1.2.\n","  FutureWarning,\n"]}]},{"cell_type":"code","source":["synth.generator_aux.save('drive/MyDrive/dataset/checkpoint/timeGAN/generator_35.h5')\n","synth.supervisor.save('drive/MyDrive/dataset/checkpoint/timeGAN/supervisor_35.h5')\n","synth.discriminator.save('drive/MyDrive/dataset/checkpoint/timeGAN/discriminator_35.h5')\n","synth.recovery.save('drive/MyDrive/dataset/checkpoint/timeGAN/recovery_35.h5')\n","synth.embedder.save('drive/MyDrive/dataset/checkpoint/timeGAN/embedder_35.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YkSGPT2oihDF","executionInfo":{"status":"ok","timestamp":1660398854172,"user_tz":-120,"elapsed":249,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}},"outputId":"b8423ddb-ff3e-478c-98d2-789a0615a428"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n","WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n","WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n","WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n","WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]}]},{"cell_type":"code","source":["from keras.models import load_model\n","\n","synth.generator_aux = load_model('drive/MyDrive/dataset/checkpoint/timeGAN/generator_35.h5')\n","synth.supervisor = load_model('drive/MyDrive/dataset/checkpoint/timeGAN/supervisor_35.h5')\n","synth.discriminator = load_model('drive/MyDrive/dataset/checkpoint/timeGAN/discriminator_35.h5')\n","synth.recovery = load_model('drive/MyDrive/dataset/checkpoint/timeGAN/recovery_35.h5')\n","synth.embedder = load_model('drive/MyDrive/dataset/checkpoint/timeGAN/embedder_35.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o8fwhnH2ihH9","executionInfo":{"status":"ok","timestamp":1660398859472,"user_tz":-120,"elapsed":4011,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}},"outputId":"c3d6af00-6ea8-4509-e7d0-0984e6537b03"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:No training configuration found in the save file, so the model was *not* compiled. Compile it manually.\n","WARNING:tensorflow:No training configuration found in the save file, so the model was *not* compiled. Compile it manually.\n","WARNING:tensorflow:No training configuration found in the save file, so the model was *not* compiled. Compile it manually.\n","WARNING:tensorflow:No training configuration found in the save file, so the model was *not* compiled. Compile it manually.\n","WARNING:tensorflow:No training configuration found in the save file, so the model was *not* compiled. Compile it manually.\n"]}]},{"cell_type":"code","source":["num_x = 3\n","num_y = 3\n","fig, axs = plt.subplots(num_x, num_y, figsize=(10, 6), constrained_layout=True)\n","for ax, id in zip(axs.flat, range(num_x*num_y)):\n","  ax.plot(synth_data_reduced[id])\n","  ax.plot(stock_data_reduced[id])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":457},"id":"GCcZnkkodpE1","executionInfo":{"status":"ok","timestamp":1660421723814,"user_tz":-120,"elapsed":4471,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}},"outputId":"a285e23d-4479-4c57-9d39-bad435b39ac7"},"execution_count":85,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x432 with 9 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["fig = plt.figure(constrained_layout=True, figsize=(20,10))\n","spec = gridspec.GridSpec(ncols=2, nrows=1, figure=fig)\n","\n","#TSNE scatter plot\n","ax = fig.add_subplot(spec[0,0])\n","ax.set_title('PCA results',\n","             fontsize=20,\n","             color='red',\n","             pad=10)\n","\n","#PCA scatter plot\n","plt.scatter(pca_real.iloc[:, 0].values, pca_real.iloc[:,1].values,\n","            c='black', alpha=0.2, label='Original')\n","plt.scatter(pca_synth.iloc[:,0], pca_synth.iloc[:,1],\n","            c='red', alpha=0.2, label='Synthetic')\n","ax.legend()\n","\n","ax2 = fig.add_subplot(spec[0,1])\n","ax2.set_title('TSNE results',\n","              fontsize=20,\n","              color='red',\n","              pad=10)\n","\n","plt.scatter(tsne_results.iloc[:sample_size, 0].values, tsne_results.iloc[:sample_size,1].values,\n","            c='black', alpha=0.2, label='Original')\n","plt.scatter(tsne_results.iloc[sample_size:,0], tsne_results.iloc[sample_size:,1],\n","            c='red', alpha=0.2, label='Synthetic')\n","\n","ax2.legend()\n","\n","fig.suptitle('Validating synthetic vs real data diversity and distributions',\n","             fontsize=16,\n","             color='grey')"],"metadata":{"id":"-RLD-ith8Yxa","colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"status":"ok","timestamp":1660423127371,"user_tz":-120,"elapsed":941,"user":{"displayName":"Qi Zheng","userId":"09290969562239580215"}},"outputId":"ed8c65a4-d7b9-46eb-982f-f79886b2c4e8"},"execution_count":86,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0.98, 'Validating synthetic vs real data diversity and distributions')"]},"metadata":{},"execution_count":86},{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x720 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}